{"version":3,"sources":["assets/images/splatterprofile.png","components/Navbar/index.js","components/Projects/index.js","components/About/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavItem","name","to","className","activeClass","hashSpy","spy","smooth","duration","MediaIcons","href","size","Navbar","ProjectItem","title","subtitle","description","link","Projects","About","src","profileImage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,6C,sPCOrCC,G,MAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACZ,kBAAC,OAAD,CACIC,UAAU,mBACVC,YAAY,iBACZF,GAAIA,EACJG,SAAS,EACTC,KAAK,EACLC,QAAQ,EACRC,SAAU,KAETP,KAIHQ,EAAa,kBACf,yBAAKN,UAAU,cACX,uBAAGO,KAAK,8BACJ,kBAAC,IAAD,CAAUC,KAAM,MAEpB,uBAAGD,KAAK,qDACJ,kBAAC,IAAD,CAAcC,KAAM,MAExB,uBAAGD,KAAK,8BACJ,kBAAC,IAAD,CAAYC,KAAM,QAKjBC,EAAS,kBAClB,yBAAKT,UAAU,UACX,kBAAC,EAAD,CAASD,GAAG,QAAQD,KAAK,UACzB,kBAAC,EAAD,CAASC,GAAG,WAAWD,KAAK,aAC5B,kBAAC,EAAD,QClCFY,G,MAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,YAAaC,EAAjC,EAAiCA,KAAjC,OAChB,yBAAKd,UAAU,0BACX,uBAAGO,KAAMO,GACL,4BAAKH,IAET,2BAAIC,GACJ,2BAAIC,MAICE,EAAW,kBACpB,kBAAC,UAAD,CAASf,UAAU,kBAAkBF,KAAK,YACtC,kBAAC,EAAD,CACIgB,KAAK,iEACLH,MAAM,QACNC,SAAS,8CACTC,YAAY,iXAGhB,kBAAC,EAAD,CACIF,MAAM,aACNG,KAAK,mGACLF,SAAS,2CACTC,YAAY,qTAGhB,kBAAC,EAAD,CACIC,KAAK,kCACLH,MAAM,OACNC,SAAS,sBACTC,YAAY,8b,iBC5BXG,G,MAAQ,kBACjB,kBAAC,UAAD,CAAShB,UAAU,kCAAkCF,KAAK,SACtD,yBAAKmB,IAAKC,MACV,0CACA,gEACA,sWAOA,wUAOA,iLCROC,MAZf,WACI,OACI,yBAAKnB,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,oBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAIoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94d5a85d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/splatterprofile.aae67cba.png\";","import React from \"react\";\nimport { Link } from \"react-scroll\";\n\nimport { FaGithub, FaLinkedinIn, FaEnvelope } from \"react-icons/fa\";\n\nimport \"./Navbar.scss\";\n\nconst NavItem = ({ name, to }) => (\n    <Link\n        className=\"inactive-navitem\"\n        activeClass=\"active-navitem\"\n        to={to}\n        hashSpy={true}\n        spy={true}\n        smooth={true}\n        duration={500}\n    >\n        {name}\n    </Link>\n);\n\nconst MediaIcons = () => (\n    <div className=\"mediaIcons\">\n        <a href=\"https://github.com/EDsCODE\">\n            <FaGithub size={22}></FaGithub>\n        </a>\n        <a href=\"https://www.linkedin.com/in/eric-duong-074420154/\">\n            <FaLinkedinIn size={22}></FaLinkedinIn>\n        </a>\n        <a href=\"mailto:eric.duong@yale.edu\">\n            <FaEnvelope size={22}></FaEnvelope>\n        </a>\n    </div>\n);\n\nexport const Navbar = () => (\n    <div className=\"navbar\">\n        <NavItem to=\"about\" name=\"ABOUT\"></NavItem>\n        <NavItem to=\"projects\" name=\"PROJECTS\"></NavItem>\n        <MediaIcons></MediaIcons>\n    </div>\n);\n","import React from \"react\";\nimport { Element } from \"react-scroll\";\n\nimport \"./Projects.scss\";\n\nconst ProjectItem = ({ title, subtitle, description, link }) => (\n    <div className=\"project-item-container\">\n        <a href={link}>\n            <h1>{title}</h1>\n        </a>\n        <p>{subtitle}</p>\n        <p>{description}</p>\n    </div>\n);\n\nexport const Projects = () => (\n    <Element className=\"element-section\" name=\"projects\">\n        <ProjectItem\n            link=\"https://apps.apple.com/us/app/gathr-social-events/id1476002981\"\n            title=\"gathr\"\n            subtitle=\"Flutter · Firebase · Graphql (Prisma)\"\n            description=\"gathr is currently under development. It will be a tool that makes social event planning effortless. Our current beta allows users to plan events through the app and automatically send text invites. Invitees can reply directly by texting back to confirm their attendance. We're working on applying NLP in parsing natural text-entry to discretize event information.\"\n        ></ProjectItem>\n\n        <ProjectItem\n            title=\"Homecooked\"\n            link=\"https://www.newhavenindependent.org/index.php/archives/entry/new_app_booking_a_home-cooked_meal/\"\n            subtitle=\"React Native · NodeJS · Postgresql\"\n            description=\"Homecooked was a app dining platform that allowed users to search and book nearby dining events. The app fascilitated over 50 dining events/500 people in the local New Haven area. The app emphasized the social aspect of dining by highlighting the interests and bios of people who were attending an event.\"\n        ></ProjectItem>\n\n        <ProjectItem\n            link=\"https://github.com/EDsCODE/Rope\"\n            title=\"Rope\"\n            subtitle=\"Swift · Firebase\"\n            description=\"Rope was an app that experimented with the idea of in-the-moment video-collage creation. Users on the app would initialize a session and add other people to their session by sharing a QR code. Participating members in the session would be able to take videos and add them to the rope. Once the rope expired or the alotted amount of videos were taken, the rope would close and become an instagram-story like video compilation of the videos.\"\n        ></ProjectItem>\n    </Element>\n);\n","import React from \"react\";\nimport { Element } from \"react-scroll\";\n\nimport profileImage from \"../../assets/images/splatterprofile.png\";\n\nimport \"./About.scss\";\n\nexport const About = () => (\n    <Element className=\"element-section about-container\" name=\"about\">\n        <img src={profileImage}></img>\n        <h1>Eric Duong</h1>\n        <p>I tinker with products and ideas!</p>\n        <p>\n            I'm a senior at Yale studying Math and Philosophy with significant\n            computational coursework. Apart from theoretical and philosophical\n            musings, I'm an avid developer. I stumbled into iOS (Swift)\n            development upon entering college and have since run the gauntlet of\n            mobile developent, moving from Swift to React Native to Flutter.\n        </p>\n        <p>\n            In 2018, I cofounded Homecooked, a social dining startup. I was the\n            sole developer and maintainer of the platform for over a year before\n            shutting down. We were backed by Yale's Tsai Center of Innovative\n            Thinking and Design, Collab New Haven, and won various local\n            Connecticut startup competitions.\n        </p>\n        <p>\n            My long-term goal is to use technology to provide solutions for\n            causes. On my way there, I'm expanding my product skills in every\n            way possible.\n        </p>\n    </Element>\n);\n","import React from \"react\";\nimport { Element } from \"react-scroll\";\nimport \"./App.scss\";\n\nimport { Navbar, Projects, About } from \"./components\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Navbar></Navbar>\n            <div className=\"scroll-container\">\n                <About></About>\n                <Projects></Projects>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}